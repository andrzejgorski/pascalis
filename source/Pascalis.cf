    comment "//" ;
    comment "{" "}" ;

    Prog. Program   ::= "program" Ident ";" [Decl] "incipe" [Stm] "fini." ;
    DVar.  Decl     ::= "variabilis" Ident ":" Type ;
    DAVar. Decl     ::= "variabilis" Ident ":" "matrix" "[" Exp ".." Exp"]" "autem" Type ;
    DProc. Decl     ::= "processus" Ident "(" [Decl] ")" ";" [Decl] "incipe" [Stm] "fini" ;

	terminator Stm "" ;
	separator  Decl ";" ;
	separator  nonempty Ident "," ;

    Skip.    Stm ::= "persulta" ";" ;
    SPrint.  Stm ::= "incribo" "(" Exp ")" ";" ;

    SIf.     Stm ::= "si" Exp "tunc" Stm ;
    SIfElse. Stm ::= "si" Exp "tunc" Stm "alter" Stm;
	SExp.    Stm ::= Exp ";" ;
    SDecl.   Stm ::= [Decl] ;
	SBlock.  Stm ::= "incipe" [Stm] "fini" ";" ;
	SReturn. Stm ::= "refer" Exp ";" ;
	STSet.   Stm ::= Ident "[" Exp "]" ":=" Exp ";" ;
	SSet.    Stm ::= Ident ":=" Exp ";" ;
	SWhile.  Stm ::= "donec" Exp "fac" Stm ;
	SFor.    Stm ::= "pro" Ident "=" Exp "ut" Exp "fac" Stm ;

	BTrue.   Exp ::= "verum" ;
	BFalse.  Exp ::= "falsum" ;
	Null.    Exp ::= "nullum" ;
	BNot.    Exp ::= "non" Exp ;

	EFSub.   Exp ::= Exp "[:]" ;
	ELSub.   Exp ::= Exp "[" Exp ":]" ;
	ERSub.   Exp ::= Exp "[:" Exp "]" ;
	ELRSub.  Exp ::= Exp "[" Exp ":" Exp "]" ;
	EKey.    Exp ::= Exp "[" Exp "]" ;
	ELen.    Exp ::= "longitudo" "(" Exp ")" ;
	EOrd.    Exp ::= "ord" "(" Exp ")" ;

    EOr.     Exp ::= Exp "uel" Exp ;
    EAnd.    Exp ::= Exp "et" Exp ;
	EAss.    Exp ::= Exp "=" Exp ;
	ENAss.   Exp ::= Exp "<>" Exp ;
	ELt.     Exp ::= Exp2 "<" Exp2 ;
	EGt.     Exp ::= Exp2 ">" Exp2 ;
	ELEt.    Exp ::= Exp2 "=<" Exp2 ;
	EGEt.    Exp ::= Exp2 ">=" Exp2 ;

	EAdd.    Exp2 ::= Exp2 "+" Exp3 ;
	ESub.    Exp2 ::= Exp2 "-" Exp3 ;
	EMul.    Exp3 ::= Exp3 "*" Exp4 ;
	EDiv.    Exp3 ::= Exp3 "/" Exp4 ;

	Call.    Exp4 ::= Ident "(" [Exp] ")" ;

	EStr.    Exp4 ::= String ;
	EChar.   Exp4 ::= Char ;
	EVar.    Exp4 ::= Ident ;
	EInt.    Exp4 ::= Integer ;
	EDouble. Exp4 ::= Double ;

	coercions Exp 4 ;

	separator Exp "," ;

    TInt.   Type ::= "numeri integri" ;
    TBool.  Type ::= "logica booleana" ;
    TStr.   Type ::= "titulus" ;
    TChar.  Type ::= "litera" ;
    TFunc.  Type ::= "functio" ;
    TProc.  Type ::= "procedure" ;
    TArr.   Type ::= "matrix" "{" Type "}" "autem" Type ;
    TDict.  Type ::= "dictionarum" "{" Type "}" "autem" Type ;
